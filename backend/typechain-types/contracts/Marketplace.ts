/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature: "buyNFT" | "getListingFee" | "listNFT" | "listings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MarketItemListed" | "NFTSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
}

export namespace MarketItemListedEvent {
  export type InputTuple = [
    marketItemId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    creator: AddressLike,
    seller: AddressLike,
    owner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    marketItemId: bigint,
    nftContract: string,
    tokenId: bigint,
    creator: string,
    seller: string,
    owner: string,
    price: bigint
  ];
  export interface OutputObject {
    marketItemId: bigint;
    nftContract: string;
    tokenId: bigint;
    creator: string;
    seller: string;
    owner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    collection: AddressLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    collection: string,
    tokenId: bigint,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    collection: string;
    tokenId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyNFT: TypedContractMethod<
    [contractAddress: AddressLike, _marketItemId: BigNumberish],
    [void],
    "payable"
  >;

  getListingFee: TypedContractMethod<[], [bigint], "view">;

  listNFT: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [bigint],
    "payable"
  >;

  listings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, string, string, string, bigint] & {
        marketItemId: bigint;
        nftContractAddress: string;
        tokenId: bigint;
        creator: string;
        seller: string;
        owner: string;
        price: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<
    [contractAddress: AddressLike, _marketItemId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getListingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, string, string, string, bigint] & {
        marketItemId: bigint;
        nftContractAddress: string;
        tokenId: bigint;
        creator: string;
        seller: string;
        owner: string;
        price: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "MarketItemListed"
  ): TypedContractEvent<
    MarketItemListedEvent.InputTuple,
    MarketItemListedEvent.OutputTuple,
    MarketItemListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;

  filters: {
    "MarketItemListed(uint256,address,uint256,address,address,address,uint256)": TypedContractEvent<
      MarketItemListedEvent.InputTuple,
      MarketItemListedEvent.OutputTuple,
      MarketItemListedEvent.OutputObject
    >;
    MarketItemListed: TypedContractEvent<
      MarketItemListedEvent.InputTuple,
      MarketItemListedEvent.OutputTuple,
      MarketItemListedEvent.OutputObject
    >;

    "NFTSold(address,uint256,address,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
  };
}
